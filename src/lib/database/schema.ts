// Drizzle ORM schema definition for Cloudflare D1
// Auto-generated by drizzle-kit introspect, with type exports added
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const clients = sqliteTable('clients', {
	id: text().primaryKey(),
	name: text(),
	slug: text(),
	createdAt: text('created_at').default('sql`(CURRENT_TIMESTAMP)`'),
	updatedAt: text('updated_at'),
	status: text().default('sql`(active)`'),
	metadata: text()
});

export const users = sqliteTable('users', {
	id: text().primaryKey(),
	clientId: text('client_id'),
	email: text(),
	emailVerifiedAt: text('email_verified_at'),
	passwordHash: text('password_hash'),
	ssoUserId: text('sso_user_id'),
	firstName: text('first_name'),
	lastName: text('last_name'),
	avatarUrl: text('avatar_url'),
	createdAt: text('created_at'),
	updatedAt: text('updated_at'),
	firstLoginAt: text('first_login_at'),
	lastLoginAt: text('last_login_at'),
	status: text(),
	role: text().default('sql`(player)`'),
	timezone: text(),
	lastActiveAt: text('last_active_at'),
	sessionCount: integer('session_count'),
	preferences: text(),
	notes: text()
});

export const sports = sqliteTable('sports', {
	id: text(),
	name: text(),
	slug: text(),
	isActive: integer('is_active'),
	imageUrl: text('image_url'),
	minPlayers: integer('min_players'),
	maxPlayers: integer('max_players'),
	rulebookUrl: text('rulebook_url'),
	sport: text(),
	type: text(),
	description: text(),
	clientId: text('client_id'),
	createdAt: text('created_at'),
	updatedAt: text('updated_at')
});

export const leagues = sqliteTable('leagues', {
	id: text().primaryKey(),
	clientId: text('client_id'),
	sportId: text('sport_id'),
	name: text(),
	slug: text(),
	description: text(),
	year: integer(),
	season: text(),
	gender: text(),
	skillLevel: text('skill_level'),
	regStartDate: text('reg_start_date'),
	regEndDate: text('reg_end_date'),
	seasonStartDate: text('season_start_date'),
	seasonEndDate: text('season_end_date'),
	hasPostseason: integer('has_postseason'),
	postseasonStartDate: text('postseason_start_date'),
	postseasonEndDate: text('postseason_end_date'),
	hasPreseason: integer('has_preseason'),
	preseasonStartDate: text('preseason_start_date'),
	preseasonEndDate: text('preseason_end_date'),
	isActive: integer('is_active'),
	isLocked: integer('is_locked'),
	imageUrl: integer('image_url'),
	createdAt: text('created_at'),
	updatedAt: text('updated_at')
});

export const divisions = sqliteTable('divisions', {
	id: text().primaryKey(),
	leagueId: text('league_id'),
	name: text(),
	slug: text(),
	description: text(),
	dayOfWeek: text('day_of_week'),
	gameTime: text('game_time'),
	maxTeams: integer('max_teams'),
	location: text(),
	isActive: integer('is_active'),
	isLocked: integer('is_locked'),
	teamsCount: integer('teams_count'),
	startDate: text('start_date'),
	createdAt: text('created_at'),
	updatedAt: text('updated_at')
});

export const teams = sqliteTable('teams', {
	id: integer().primaryKey(),
	clientId: integer('client_id')
		.notNull()
		.references(() => clients.id),
	divisionId: integer('division_id')
		.notNull()
		.references(() => divisions.id),
	name: text().notNull(),
	slug: text().notNull(),
	description: text(),
	imageUrl: text('image_url'),
	teamStatus: text('team_status').notNull(),
	doesAcceptFreeAgents: integer('does_accept_free_agents').default(0).notNull(),
	isAutoAcceptMembers: integer('is_auto_accept_members').default(0).notNull(),
	currentRosterSize: integer('current_roster_size').default(0).notNull(),
	teamColor: text('team_color'),
	dateRegistered: text('date_registered'),
	createdAt: text('created_at').notNull(),
	updatedAt: text('updated_at').notNull()
});

export const rosters = sqliteTable('rosters', {
	id: integer().primaryKey(),
	clientId: integer('client_id')
		.notNull()
		.references(() => clients.id),
	teamId: integer('team_id')
		.notNull()
		.references(() => teams.id),
	userId: integer('user_id')
		.notNull()
		.references(() => users.id),
	isCaptain: integer('is_captain').default(0).notNull(),
	isCoCaptain: integer('is_co_captain').default(0).notNull(),
	rosterStatus: text('roster_status').notNull(),
	dateJoined: text('date_joined'),
	createdAt: text('created_at').notNull(),
	updatedAt: text('updated_at').notNull()
});

// TypeScript type exports for full type safety
export type Client = typeof clients.$inferSelect;
export type NewClient = typeof clients.$inferInsert;

export type User = typeof users.$inferSelect;
export type NewUser = typeof users.$inferInsert;

export type Sport = typeof sports.$inferSelect;
export type NewSport = typeof sports.$inferInsert;

export type League = typeof leagues.$inferSelect;
export type NewLeague = typeof leagues.$inferInsert;

export type Division = typeof divisions.$inferSelect;
export type NewDivision = typeof divisions.$inferInsert;

export type Team = typeof teams.$inferSelect;
export type NewTeam = typeof teams.$inferInsert;

export type Roster = typeof rosters.$inferSelect;
export type NewRoster = typeof rosters.$inferInsert;
